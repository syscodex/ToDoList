@model List<ToDoList.Models.ToDoItem>
@using ToDoList.Helpers

@{
    ViewData["Title"] = "To-Do List";
}

<style>
    /* Add custom styles if needed */
    body {
        padding: 20px;
    }

    .kanban-column {
        margin-bottom: 20px;
    }
</style>



<!-- Search and Filter Form Container -->  
<div class="container mb-4 search-filter-container">  <!-- Unique class name added -->  
    <form method="get" class="form-container">  <!-- Keep this if you plan to style the form independently -->  
        <div class="row g-2 align-items-center">  
            <!-- Search Bar Section -->  
            <div class="col-8 col-md-7">  
                <div class="input-group">  
                    <span class="input-group-text bg-light border-end-0">  
                        <i class="bi bi-search"></i>  
                    </span>  
                    <input type="text" name="searchQuery"  
                           class="form-control border-start-0"  
                           placeholder="Search tasks by title or details"  
                           value="@ViewData["SearchQuery"]"  
                           aria-label="Search tasks" />  
                    <button type="submit" class="btn btn-outline-primary">  
                        <i class="bi bi-search"></i>  
                    </button>  
                </div>  

                <!-- Search Result Message -->  
                @if (!string.IsNullOrEmpty(ViewData["SearchQuery"]?.ToString()))  
                {  
                    <div class="search-results mt-1 small fw-light">  
                        @if (!Model.Any())   
                        {  
                            <span>No recent items match your search.</span>  
                            <a href="@Url.Action("Index", "ToDo")" class="link-primary">Search older items</a>  
                        }  
                        else   
                        {  
                            <span>All search results for "@ViewData["SearchQuery"]"</span>  
                        }  
                    </div>  
                }  
            </div>  

            <!-- Status Filter Section -->  
            <div class="col-4 col-md-3">  
                <select id="statusFilter" name="statusFilter" class="form-select">  
                    <option value="">All Tasks</option>  
                    <option value="Pending" selected="@(ViewData["StatusFilter"]?.ToString() == "Pending")">Pending</option>  
                    <option value="InProgress" selected="@(ViewData["StatusFilter"]?.ToString() == "InProgress")">In Progress</option>  
                    <option value="Completed" selected="@(ViewData["StatusFilter"]?.ToString() == "Completed")">Completed</option>  
                    <option value="OnHold" selected="@(ViewData["StatusFilter"]?.ToString() == "OnHold")">On Hold</option>  
                </select>  
            </div>  

            <!-- Apply Filters Button -->  
            <div class="col-12 col-md-2 d-grid">  
                <button type="submit" class="btn btn-primary">  
                    <i class="bi bi-filter"></i> Apply  
                </button>  
            </div>  
        </div>  
    </form>  
</div>  

<!-- Toggle View and Task Creation Section -->  
<div class="container mb-3">  
    <div class="d-flex justify-content-between align-items-center">  
        <!-- Create New Task Button -->  
        <a href="@Url.Action("Create", "ToDo")" class="btn btn-primary">  
            <i class="bi bi-plus-circle me-2"></i>  
            <span>  
                @if (Model != null && Model.Any())  
                {  
                    <span>Create New Task</span>  
                }  
                else  
                {  
                    <span>Create First Task</span>  
                }  
            </span>  
        </a>  

        <!-- Toggle View Buttons -->  
        <div>  
            <button id="kanbanViewBtn" class="btn btn-outline-primary me-2" onclick="toggleView(true)">Kanban View</button>  
            <button id="floatingViewBtn" class="btn btn-outline-secondary" onclick="toggleView(false)">Floating View</button>  
        </div>  
    </div>  
</div>    




<!--- Kanban View --->
<div id="kanbanView" style="display:block;">
    <h2>@ViewData["Title"]</h2>
    <div class="row">
        @foreach (var status in Enum.GetValues(typeof(ToDoList.Models.TaskStatus)).Cast<ToDoList.Models.TaskStatus>())
        {
            <div class="col-12 col-sm-6 col-md-3">
                <div class="kanban-column">
                    <h5>@ToDoHelpers.GetStatusDisplayName(status)</h5>
                    <div class="kanban-tasks">
                        @if (!Model.Any(t => t.Status == status))
                        {
                            <p>No tasks in this category.</p>
                        }
                        @Html.Partial("_TaskList", Model.Where(t => t.Status == status))
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!--- Floating View --->
<div id="floatingView" style="display:none;">
    <h2>Floating View</h2>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @if (Model.Count == 0)
        {
            <p>No tasks available. Click the button below to create a task.</p>
        }
        @Html.Partial("_TaskList", Model)
    </div>
</div>


<!--- JavaScript for View Toggling --->
@section Scripts {
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.js"></script>
       <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
       <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const VIEW_TYPES = {
            KANBAN: 'kanban',
            FLOATING: 'floating'
        };

        const DOM_ELEMENTS = {
            kanbanView: document.getElementById('kanbanView'),
            floatingView: document.getElementById('floatingView'),
            kanbanViewBtn: document.getElementById('kanbanViewBtn'),
            floatingViewBtn: document.getElementById('floatingViewBtn')
        };

        const STORAGE_KEY = 'viewPreference';

        function toggleView(isKanban) {
            const activeView = isKanban ? VIEW_TYPES.KANBAN : VIEW_TYPES.FLOATING;
            DOM_ELEMENTS.kanbanView.style.display = isKanban ? 'block' : 'none';
            DOM_ELEMENTS.floatingView.style.display = isKanban ? 'none' : 'block';
            updateButtonStyles(isKanban);
            localStorage.setItem(STORAGE_KEY, activeView);
        }

        function updateButtonStyles(isKanban) {
            DOM_ELEMENTS.kanbanViewBtn.classList.toggle('btn-primary', isKanban);
            DOM_ELEMENTS.kanbanViewBtn.classList.toggle('btn-outline-primary', !isKanban);
            DOM_ELEMENTS.floatingViewBtn.classList.toggle('btn-primary', !isKanban);
            DOM_ELEMENTS.floatingViewBtn.classList.toggle('btn-outline-secondary', isKanban);
        }

        function initializeView() {
            const savedView = localStorage.getItem(STORAGE_KEY);
            toggleView(savedView !== VIEW_TYPES.FLOATING);
        }

        document.addEventListener('DOMContentLoaded', initializeView);
        window.toggleView = toggleView;
    </script>
}

