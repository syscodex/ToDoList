@model List<ToDoList.Models.ToDoItem>
@using ToDoList.Helpers

@{
    ViewData["Title"] = "To-Do List";
}

<style>
    /* Add custom styles if needed */
    body {
        padding: 20px;
    }

    .kanban-column {
        margin-bottom: 50px;
    }
</style>


<!-- Search and Filter Form Container -->  
<div>@Html.Partial("_SearchAndFilterForm")</div>
   


<!-- Toggle View and Task Creation Section -->
<div class="container mb-3">
    <div class="d-flex justify-content-between align-items-center">
        <!-- Create New Task Button -->
        <a href="@Url.Action("Create", "ToDo")" class="btn btn-sm btn-primary">
            <i class="bi bi-plus-circle me-1 fs-4"></i>  <!-- Adjusted font size for better visibility -->
            <span>
                @if (Model != null && Model.Any())
                {
                    <span>Create New Task</span>
                }
                else
                {
                    <span>Create First Task</span>
                }
            </span>
        </a>

        <!-- Toggle View Buttons -->
        <div>
            <button id="kanbanViewBtn" class="btn btn-sm btn-outline-primary me-2" onclick="toggleView(true)">Kanban</button>
            <button id="floatingViewBtn" class="btn btn-sm btn-outline-secondary" onclick="toggleView(false)">Floating</button>
        </div>
    </div>
</div>


<!--- Kanban View --->
<div id="kanbanView" style="display:block;">
    <h2>@ViewData["Title"]</h2>
    <div class="row">
        @foreach (var status in Enum.GetValues(typeof(ToDoList.Models.TaskStatus)).Cast<ToDoList.Models.TaskStatus>())
        {
            <div class="col-12 col-sm-6 col-md-3">
                <div class="kanban-column">
                    <div class="center-container text-center">
                        <h3 class="text-muted" style="font-size: 1.25rem; font-weight: 300; margin-top: 20px;">
                            @ToDoHelpers.GetStatusDisplayName(status)
                        </h3>
                    </div>
                    <div class="kanban-tasks">
                        @if (!Model.Any(t => t.Status == status))
                        {
                            <p class="text-center bg-light p-4 rounded shadow-sm fs-5 text-dark mx-auto my-5" style="max-width: 400px;">No tasks in this category.</p>
                        }
                        @Html.Partial("_TaskList", Model.Where(t => t.Status == status))
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Floating View -->
<div id="floatingView" style="display:none;">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 gx-4 gy-4">
        <!-- Adjusting the horizontal (gx-4) and vertical (gy-4) gaps -->
        @if (Model.Count == 0)
        {
            <p>No tasks available. Click the button below to create a task.</p>
        }
        @Html.Partial("_TaskList", Model)
    </div>
</div>



<!--- JavaScript for View Toggling --->
@section Scripts {
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.js"></script>
       <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
       <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const VIEW_TYPES = {
            KANBAN: 'kanban',
            FLOATING: 'floating'
        };

        const DOM_ELEMENTS = {
            kanbanView: document.getElementById('kanbanView'),
            floatingView: document.getElementById('floatingView'),
            kanbanViewBtn: document.getElementById('kanbanViewBtn'),
            floatingViewBtn: document.getElementById('floatingViewBtn')
        };

        const STORAGE_KEY = 'viewPreference';

        function toggleView(isKanban) {
            const activeView = isKanban ? VIEW_TYPES.KANBAN : VIEW_TYPES.FLOATING;
            DOM_ELEMENTS.kanbanView.style.display = isKanban ? 'block' : 'none';
            DOM_ELEMENTS.floatingView.style.display = isKanban ? 'none' : 'block';
            updateButtonStyles(isKanban);
            localStorage.setItem(STORAGE_KEY, activeView);
        }

        function updateButtonStyles(isKanban) {
            DOM_ELEMENTS.kanbanViewBtn.classList.toggle('btn-primary', isKanban);
            DOM_ELEMENTS.kanbanViewBtn.classList.toggle('btn-outline-primary', !isKanban);
            DOM_ELEMENTS.floatingViewBtn.classList.toggle('btn-primary', !isKanban);
            DOM_ELEMENTS.floatingViewBtn.classList.toggle('btn-outline-secondary', isKanban);
        }

        function initializeView() {
            const savedView = localStorage.getItem(STORAGE_KEY);
            toggleView(savedView !== VIEW_TYPES.FLOATING);
        }

        document.addEventListener('DOMContentLoaded', initializeView);
        window.toggleView = toggleView;
    </script>
}

